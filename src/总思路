   1.后端乐观锁（不利于文档编辑类和协同类，要松散的合并） 非分布式
   2.无冲突解决 OT，CRDT（状态，操作【notion op operation】）
   conflict-free replicated data types
   数据结构抽象 关注点
   操作CRDT:state 每个副本的内部状态
   state_zero 内部状态的初始值
   op 每个原子操作的类型，副本直接通过传递op来达到同步
   apply_op(state,op) 是一个在state上应用op的函数，返回新的状态。op交换律
   check state（state op）确认一个状态是否满足应用op的前置条件
   
   （1.操作以因果顺序到达各个副本，否则它们必须是可交换的。2.所有冲突操作必须满足交换律）
   先check再applyop，不满足条件就将阻塞延迟
   check保证op所以来的因果顺序成立。副本之间传递彼此缺失的op，并进行apply-op达到最终一致性
   副本之间通过传递彼此缺失的op，并进行apply达到最终一致性 （具体的apply check 还有传递怎么实现？）    

    原子操作op:insert,op:delete,op:update
   CRDT原理： 首先有符合CRDT的数据结构，具备去中心化的特性，非常适合离线编辑
   1.每个客户端都具备独一份的数据结构，可以独立修改（P2P 去中心化）
   2.冲突消除：CRDT算法来消除冲突
   3.一致性维护，最终保证所有客户端达到最终一致性的状态

   CRDT算法实现细节（OT）


1.光标同步：不同用户在文档中的光标位置实时同步，便于了解他人的编辑位置。
3.输入同步：用户的输入内容实时同步到所有协作用户的视图中，实现多人实时编辑

CAP定理 强一致性，可用性，分区容错性
强一致性无法满足，（因果一致性）是最强的一致性
设计合理的数据结构，使操作满足交换律、结合律和幂等性
yjs:实时数据同步，冲突解决
yjs数据结构 双向链表树，通过唯一id和左右节点实现因果一致性